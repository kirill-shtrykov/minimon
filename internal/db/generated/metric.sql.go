// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: metric.sql

package generated

import (
	"context"
	"time"
)

const addValue = `-- name: AddValue :one
INSERT INTO metric (
    key, type, value
) VALUES (
    ?, ?, ?
)
RETURNING id
`

type AddValueParams struct {
	Key   string
	Type  string
	Value []byte
}

func (q *Queries) AddValue(ctx context.Context, arg AddValueParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, addValue, arg.Key, arg.Type, arg.Value)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const metric = `-- name: Metric :many
SELECT id, "key", type, value, date
FROM metric
WHERE key LIKE ?
  AND date > ?2
  AND date < ?3
`

type MetricParams struct {
	Key     string
	MinDate time.Time
	MaxDate time.Time
}

func (q *Queries) Metric(ctx context.Context, arg MetricParams) ([]Metric, error) {
	rows, err := q.db.QueryContext(ctx, metric, arg.Key, arg.MinDate, arg.MaxDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Metric
	for rows.Next() {
		var i Metric
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.Type,
			&i.Value,
			&i.Date,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const metricsByDate = `-- name: MetricsByDate :many
SELECT id, "key", type, value, date
FROM metric
WHERE date > ?1
  AND date < ?2
`

type MetricsByDateParams struct {
	MinDate time.Time
	MaxDate time.Time
}

func (q *Queries) MetricsByDate(ctx context.Context, arg MetricsByDateParams) ([]Metric, error) {
	rows, err := q.db.QueryContext(ctx, metricsByDate, arg.MinDate, arg.MaxDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Metric
	for rows.Next() {
		var i Metric
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.Type,
			&i.Value,
			&i.Date,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
